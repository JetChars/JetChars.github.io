RESOLV.CONF(5)                                             Linux Programmer's Manual                                            RESOLV.CONF(5)



NNAAMMEE
       resolv.conf - resolver configuration file

SSYYNNOOPPSSIISS
       //eettcc//rreessoollvv..ccoonnff

DDEESSCCRRIIPPTTIIOONN
       The _r_e_s_o_l_v_e_r is a set of routines in the C library that provide access to the Internet Domain Name System (DNS).  The resolver configu‐
       ration file contains information that is read by the resolver routines the first time they are invoked  by  a  process.   The  file  is
       designed to be human readable and contains a list of keywords with values that provide various types of resolver information.

       If this file does not exist, only the name server on the local machine will be queried; the domain name is determined from the hostname
       and the domain search path is constructed from the domain name.

       The different configuration options are:

       nnaammeesseerrvveerr Name server IP address
              Internet address of a name server that the resolver should query, either an IPv4 address (in dot notation), or an  IPv6  address
              in colon (and possibly dot) notation as per RFC 2373.  Up to MMAAXXNNSS (currently 3, see _<_r_e_s_o_l_v_._h_>) name servers may be listed, one
              per keyword.  If there are multiple servers, the resolver library queries them in the order listed.  If  no  nnaammeesseerrvveerr  entries
              are  present,  the  default is to use the name server on the local machine.  (The algorithm used is to try a name server, and if
              the query times out, try the next, until out of name servers, then repeat trying all the name servers until a maximum number  of
              retries are made.)

       ddoommaaiinn Local domain name.
              Most  queries  for names within this domain can use short names relative to the local domain.  If set to '.', the root domain is
              considered.  If no ddoommaaiinn entry is present, the domain is determined from the local hostname  returned  by  ggeetthhoossttnnaammee(2);  the
              domain  part  is  taken to be everything after the first '.'.  Finally, if the hostname does not contain a domain part, the root
              domain is assumed.

       sseeaarrcchh Search list for host-name lookup.
              The search list is normally determined from the local domain name; by default, it contains only the local domain name.  This may
              be  changed  by  listing  the  desired domain search path following the _s_e_a_r_c_h keyword with spaces or tabs separating the names.
              Resolver queries having fewer than _n_d_o_t_s dots (default is 1) in them will be attempted using each component of the  search  path
              in  turn  until  a match is found.  For environments with multiple subdomains please read ooppttiioonnss nnddoottss::_n below to avoid man-in-
              the-middle attacks and unnecessary traffic for the root-dns-servers.  Note that this process may be slow and will generate a lot
              of network traffic if the servers for the listed domains are not local, and that queries will time out if no server is available
              for one of the domains.

              The search list is currently limited to six domains with a total of 256 characters.

       ssoorrttlliisstt
              This option allows addresses returned by ggeetthhoossttbbyynnaammee(3) to be sorted.  A sortlist is specified  by  IP-address-netmask  pairs.
              The netmask is optional and defaults to the natural netmask of the net.  The IP address and optional network pairs are separated
              by slashes.  Up to 10 pairs may be specified.  Here is an example:

                  sortlist 130.155.160.0/255.255.240.0 130.155.0.0

       ooppttiioonnss
              Options allows certain internal resolver variables to be modified.  The syntax is

                     ooppttiioonnss _o_p_t_i_o_n _._._.

              where _o_p_t_i_o_n is one of the following:

              ddeebbuugg  sets RREESS__DDEEBBUUGG in ___r_e_s_._o_p_t_i_o_n_s (effective only if glibc was built with debug support; see rreessoollvveerr(3)).

              nnddoottss::_n
                     sets a threshold for the number of dots which must appear in a name given to rreess__qquueerryy(3)  (see  rreessoollvveerr(3))  before  an
                     _i_n_i_t_i_a_l _a_b_s_o_l_u_t_e _q_u_e_r_y will be made.  The default for _n is 1, meaning that if there are any dots in a name, the name will
                     be tried first as an absolute name before any _s_e_a_r_c_h _l_i_s_t elements are appended to it.  The  value  for  this  option  is
                     silently capped to 15.

              ttiimmeeoouutt::_n
                     sets  the  amount of time the resolver will wait for a response from a remote name server before retrying the query via a
                     different name server.  Measured in seconds, the default is RREESS__TTIIMMEEOOUUTT (currently 5, see  _<_r_e_s_o_l_v_._h_>).   The  value  for
                     this option is silently capped to 30.

              aatttteemmppttss::_n
                     sets  the  number  of times the resolver will send a query to its name servers before giving up and returning an error to
                     the calling application.  The default is RREESS__DDFFLLRREETTRRYY (currently 2, see  _<_r_e_s_o_l_v_._h_>).   The  value  for  this  option  is
                     silently capped to 5.

              rroottaattee sets RREESS__RROOTTAATTEE in ___r_e_s_._o_p_t_i_o_n_s, which causes round-robin selection of nameservers from among those listed.  This has the
                     effect of spreading the query load among all listed servers, rather than having all clients try the first  listed  server
                     first every time.

              nnoo--cchheecckk--nnaammeess
                     sets  RREESS__NNOOCCHHEECCKKNNAAMMEE  in  ___r_e_s_._o_p_t_i_o_n_s, which disables the modern BIND checking of incoming hostnames and mail names for
                     invalid characters such as underscore (_), non-ASCII, or control characters.

              iinneett66  sets RREESS__UUSSEE__IINNEETT66 in ___r_e_s_._o_p_t_i_o_n_s.  This has the effect of trying a AAAA query before an A query inside  the  ggeetthhoossttbbyy‐‐
                     nnaammee(3)  function, and of mapping IPv4 responses in IPv6 "tunneled form" if no AAAA records are found but an A record set
                     exists.

                     Some programs behave strangely when this option is turned on.

              iipp66--bbyytteessttrriinngg (since glibc 2.3.4)
                     sets RREESS__UUSSEE__BBSSTTRRIINNGG in ___r_e_s_._o_p_t_i_o_n_s.  This causes reverse IPv6 lookups to be made using the bit-label  format  described
                     in RFC 2673; if this option is not set, then nibble format is used.

              iipp66--ddoottiinntt/nnoo--iipp66--ddoottiinntt (since glibc 2.3.4)
                     Clear/set  RREESS__NNOOIIPP66DDOOTTIINNTT in ___r_e_s_._o_p_t_i_o_n_s.  When this option is clear (iipp66--ddoottiinntt), reverse IPv6 lookups are made in the
                     (deprecated) _i_p_6_._i_n_t zone; when this option is set (nnoo--iipp66--ddoottiinntt), reverse IPv6 lookups are made in the _i_p_6_._a_r_p_a zone by
                     default.  This option is set by default.

              eeddnnss00 (since glibc 2.6)
                     sets RREESS__UUSSEE__EEDDNNSSOO in ___r_e_s_._o_p_t_i_o_n_s.  This enables support for the DNS extensions described in RFC 2671.

              ssiinnggllee--rreeqquueesstt (since glibc 2.10)
                     sets  RREESS__SSNNGGLLKKUUPP in ___r_e_s_._o_p_t_i_o_n_s.  By default, glibc performs IPv4 and IPv6 lookups in parallel since version 2.9.  Some
                     appliance DNS servers cannot handle these queries properly and make the requests time  out.   This  option  disables  the
                     behavior  and  makes glibc perform the IPv6 and IPv4 requests sequentially (at the cost of some slowdown of the resolving
                     process).

              ssiinnggllee--rreeqquueesstt--rreeooppeenn (since glibc 2.9)
                     The resolver uses the same socket for the A and AAAA requests.  Some hardware mistakenly sends back only one reply.  When
                     that  happens  the client system will sit and wait for the second reply.  Turning this option on changes this behavior so
                     that if two requests from the same port are not handled correctly it will close the  socket and open  a  new  one  before
                     sending the second request.

       The _d_o_m_a_i_n and _s_e_a_r_c_h keywords are mutually exclusive.  If more than one instance of these keywords is present, the last instance wins.

       The _s_e_a_r_c_h keyword of a system's _r_e_s_o_l_v_._c_o_n_f file can be overridden on a per-process basis by setting the environment variable LLOOCCAALLDDOO‐‐
       MMAAIINN to a space-separated list of search domains.

       The _o_p_t_i_o_n_s keyword of a system's _r_e_s_o_l_v_._c_o_n_f file can  be  amended  on  a  per-process  basis  by  setting  the  environment  variable
       RREESS__OOPPTTIIOONNSS to a space-separated list of resolver options as explained above under ooppttiioonnss.

       The keyword and value must appear on a single line, and the keyword (e.g., nnaammeesseerrvveerr) must start the line.  The value follows the key‐
       word, separated by white space.

       Lines that contain a semicolon (;) or hash character (#) in the first column are treated as comments.

FFIILLEESS
       _/_e_t_c_/_r_e_s_o_l_v_._c_o_n_f, _<_r_e_s_o_l_v_._h_>

SSEEEE AALLSSOO
       ggeetthhoossttbbyynnaammee(3), rreessoollvveerr(3), hhoossttnnaammee(7), nnaammeedd(8)
       Name Server Operations Guide for BIND

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, and information about reporting  bugs,
       can be found at http://www.kernel.org/doc/man-pages/.



4th Berkeley Distribution                                         2013-07-31                                                    RESOLV.CONF(5)
